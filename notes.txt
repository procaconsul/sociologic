
- Personal space as circular region centered in the position of the entity to
  account for proxemics


ASP -----------------

 - BK as context for examples you have in narrow-passage.las
 - Include full rule for overtake
 - Check whether answer sets produced are correct


======================================

- constraints in overtake_rule.lp can be extracted in a common file, as they
  will act as given general rules.
- the python script for determining behind and collinear should also be
  extracted in a common file.

+ results so far: 
  - narrow_passage_rule.las --> hangs
  - narrow_passage.las: produce single constraint 
      :~ overtake(V0, V1, V2).[-1@1,1, V0, V1, V2], as expected.

======================================

+ results so far: 
  - first two scenarios of narrow passage produce 
      :~ squeeze_by_wall(V0, V1, V2).[1@1, 1, V0, V1, V2]
      :~ past_mid(V0, corridor, V1), step_out_and_wait(V0, V2, corridor, V1).[1@2, 2,
          V0, V1, V2]

=====================================

+ results separately for context 1:
+ scenario 1:
  :~ push_out(focus_agent, V0, corridor, V1).[1@2, 1, V0, V1]
  :~ step_out_and_wait(focus_agent, V0, corridor, V1).[-1@2, 2, V0, V1]  
+ scenario 2:
  :~ squeeze_by_wall(V0, V1, V2).[1@1, 1 ...]
  :~ past_mid(V0, corridor, V1), step_out_and_wait(V0, V2, corridor, V1).[1@2 ...]  
+ scenario 3: 
  :~ give_way(focus_agent, V0, V1, corridor).[-1@1, 1, V0, V1] (if cautious ordering. Else, below)
  :~ step_out_and_wait(focus_agent, V0, corridor, V1).[1@1, 1, V0, V1]
+ scenario 4:
  :~ overtake(V0, V1, V2).[-1@2, 1, V0, V1, V2]
+ scenario 5:
  :~ step_out_and_wait(focus_agent, V0, corridor, V1).[1@1, 1, V0, V1]
  :~ push_out(focus_agent, V0, corridor, V1).[-1@1, 2, V0, V1]
+ scenario 6:
  :~ squeeze_between_conversation(focus_agent, V0, V1, V2).[1@1, 1, V0, V1, V2]
  :~ wait_end_of_talk(focus_agent, V0, V1, V2, V3).[1@1, 2, V0, V1, V2, V3]


+ results separately for context 2: VERY SLOW
+ scenario 1: 
  :~ go_behind(focus_agent, V0, V1).[-1@1, 1, V0, V1]
+ scenario 2: 
  :~ go_behind(focus_agent, V0, V1).[-1@1, 1, V0, V1]
+ scenario 3: 
  :~ go_behind(focus_agent, V0, V1).[-1@1, 1, V0, V1]

+ results separately for context 3: 
+ scenario 1:
  :~ squeeze_by_wall(focus_agent, V0, V1).[1@1, 1, V0, V1]
+ scenario 2:
  :~ squeeze_by_wall(focus_agent, V0, V1).[-1@1, 1, V0, V1]
+ scenario 3:
  :~ squeeze_by_wall(focus_agent, V0, V1).[-1@1, 1, V0, V1]
  :~ go_through_g(focus_agent, group, V0).[-1@1, 2, V0]
+ scenario 4:
  :~ go_through_g(focus_agent, group, V0).[1@1, 1, V0]

-----------------

+ results whole context 2:
  :~ go_behind(focus_agent, V0, V1).[-1@1, 1, V0, V1]


1. add rule to avoid collisions ent-ent and ent-obj
2. go_behind/go_in_front are made ad hoc for the crosssing,
  as they work on the intersection between paths of two *moving* entities
3. difference between cautious and brave 1.3
---------------------------------------
:~ step_out_and_wait(V0, V1, corridor, V2).[-1@1, 1, V0, V1, V2]
:~ give_way(V0, V1, V2, corridor).[-1@2, 2, V0, V1, V2]
:~ past_mid(V0, corridor, V1), step_out_and_wait(V0, V2, corridor, V1).[1@2, 3,
V0, V1, V2]
Pre-processing  : 0.436s
Solve time      : 5894.47s
Total           : 5894.91s
